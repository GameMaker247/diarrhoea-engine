
/*
 *             uint vao = Program.GL.GenVertexArray();
            Program.GL.BindVertexArray(vao);

            uint vertices = Program.GL.GenBuffer();
            uint indices = Program.GL.GenBuffer();
            uint texture = Program.GL.GenBuffer();

            float[] _verticesArray = new float[]
            {
                -0.5f, 0.5f, 0.0f,
                0.5f, 0.5f, 0.0f,
                0.5f, -0.5f, 0.0f,
                -0.5f, -0.5f, 0.0f
            };
            uint[] indicesArray = new uint[]
            {
                0, 1, 2,
                0, 3, 2
            };
            /*
            float[] colorArray = new float[]
            {   //1.0f, 0.0f, 0.0f, 1.0f,
                //0.0f, 0.0f, 1.0f, 1.0f,
                //0.0f, 1.0f, 0.0f, 1.0f,
                //0.5f, 0.5f, 0.5f, 1.0f
                0.0f, 0.0f, //lower-left corner
                0.0f, 1.0f, //top-left corner
                1.0f, 1.0f, //top-right corner
                1.0f, 0.0f //lower-right corner
            };*/
/*
Program.shader.ActivateShaderProgram(shader);
uint program = Program.shader.active;
Program.GL.UseProgram(program);

uint vPos = (uint)Program.GL.GetAttribLocation(program, "aPosition");
Program.GL.EnableVertexAttribArray(vPos);
Program.GL.VertexAttribPointer(vPos, 3, GLEnum.Float, false, 0, null);

Program.GL.BindBuffer(GLEnum.ArrayBuffer, vertices);
Program.GL.BufferData(GLEnum.ArrayBuffer, (ReadOnlySpan<float>)model.vertices.AsSpan(), GLEnum.StaticDraw);
*/

/*
uint vTex = (uint)Program.GL.GetAttribLocation(program, "vTex");
Program.GL.BindBuffer(GLEnum.ArrayBuffer, texture);
Program.GL.BufferData(GLEnum.ArrayBuffer, (ReadOnlySpan<float>)model.texture.AsSpan(), GLEnum.StaticDraw);
Program.GL.EnableVertexAttribArray(vTex);
Program.GL.VertexAttribPointer(vTex, 2, GLEnum.Float, false, 0, null);
*/
/*
Program.GL.BindBuffer(GLEnum.ElementArrayBuffer, indices);
Program.GL.BufferData(GLEnum.ElementArrayBuffer, (ReadOnlySpan<uint>)model.indices.AsSpan(), GLEnum.StaticDraw);

Program.GL.BindBuffer(GLEnum.ArrayBuffer, 0);
Program.GL.DrawElements(GLEnum.Triangles, 6, GLEnum.UnsignedInt, null);

Program.GL.BindBuffer(GLEnum.ElementArrayBuffer, 0);
Program.GL.BindVertexArray(vao);

Program.GL.DeleteBuffer(vertices);
Program.GL.DeleteBuffer(indices);
Program.GL.DeleteBuffer(texture);
Program.GL.DeleteVertexArray(vao);
*//*
float[] vertexArray = new float[] {
    -0.5f, 0.5f, 0.0f,
    0.5f, 0.5f, 0.0f,
    0.5f, -0.5f, 0.0f,
    -0.5f, -0.5f, 0.0f
};

float[] colorArray = new float[] {
    1.0f, 0.0f, 0.0f, 1.0f,
    0.0f, 0.0f, 1.0f, 1.0f,
    0.0f, 1.0f, 0.0f, 1.0f,
    0.5f, 0.5f, 0.5f, 1.0f
};

uint[] indexArray = new uint[] 
{ 
    0, 1, 2,
    0, 3, 2
};
*/



/*
uint vao = Program.GL.GenVertexArray();
Program.GL.BindVertexArray(vao);

uint vbo = Program.GL.GenBuffer();
uint ebo = Program.GL.GenBuffer();
tbo = Program.GL.GenBuffer();

uint program = Program.shader.GetShaderProgram(shader);


Program.GL.BindBuffer(GLEnum.ArrayBuffer, vbo);
Program.GL.BufferData(GLEnum.ArrayBuffer, (ReadOnlySpan<float>)model.vertices.AsSpan(), GLEnum.StaticDraw);
Program.GL.EnableVertexAttribArray(0);
Program.GL.VertexAttribPointer(0, 3, GLEnum.Float, false, 0, null);

Program.GL.Enable(EnableCap.Blend);
Program.GL.BlendFunc(BlendingFactor.SrcAlpha, BlendingFactor.OneMinusSrcAlpha);

uint vertexLocation = (uint)Program.GL.GetAttribLocation(program, "vPos");
Program.GL.EnableVertexAttribArray(vertexLocation);
Program.GL.VertexAttribPointer(vertexLocation, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), null);

uint texCoordLocation = (uint)Program.GL.GetAttribLocation(program, "vTex");

Program.GL.BindBuffer(GLEnum.ArrayBuffer, tbo);
Program.GL.BufferData(GLEnum.ArrayBuffer, (ReadOnlySpan<float>)model.texture.AsSpan(), GLEnum.StaticDraw);
Program.GL.EnableVertexAttribArray(texCoordLocation);
Program.GL.VertexAttribPointer(texCoordLocation, 2, VertexAttribPointerType.Float, false, 2 * sizeof(float), null);

Program.GL.BindBuffer(GLEnum.ElementArrayBuffer, ebo);
Program.GL.BufferData(GLEnum.ElementArrayBuffer, (ReadOnlySpan<uint>)model.indices.AsSpan(), GLEnum.StaticDraw);
Program.GL.BindBuffer(GLEnum.ArrayBuffer, 0);
Program.GL.DrawElements(GLEnum.TriangleStrip, 6, GLEnum.UnsignedInt, null);

Program.GL.BindBuffer(GLEnum.ElementArrayBuffer, 0);
Program.GL.BindVertexArray(vao);

Program.GL.DeleteBuffer(vbo);
Program.GL.DeleteBuffer(ebo);
Program.GL.DeleteVertexArray(vao);*/

////// OLD ENTITY SYSTEM ////////
    /*
    public class Entity
    {
        public string name { get; private set; }
        public Model model { get; private set; }
        public string shader;

        private List<Texture> textures = new List<Texture>();

        public Vector3D<float> position; //{ get; private set; }
        public Vector3D<float> rotation { get; private set; }
        public float scale { get; private set; }

        private bool debug = false;

        public Entity(string name, Model model, string shader="default", bool debug=false, string[] textures = null, Vector3D<float>? position = null, Vector3D<float>? rotation = null, float scale = 0.0f)
        {
            this.name = name;
            this.model = model;
            this.shader = shader;

            if (position == null) this.position = Vector3D<float>.Zero;
            else this.position = (Vector3D<float>)position;

            if (rotation == null) this.rotation = Vector3D<float>.Zero;
            else this.rotation = (Vector3D<float>)rotation;
            this.scale = scale;
            this.debug = debug;
            foreach(string tex in textures)
            {
                this.textures.Add(ShaderManager.CreateTexture(tex));
            }

            Setup();
        }

        public void MoveXYZ(float x, float y, float z)
        {
            position += new Vector3D<float>(x, y, z);
        }

        private uint _vertexBufferObject;
        private uint _colorBufferObject;
        private uint _vertexArrayObject;
        private uint _elementBufferObject;

        private unsafe void Setup()
        {
            // --- OBJECT --- //
            _vertexArrayObject = Program.GL.GenVertexArray();
            Program.GL.BindVertexArray(_vertexArrayObject);
            // --- ------ --- //

            // --- VERTICES --- //
            _vertexBufferObject = Program.GL.GenBuffer();
            Program.GL.BindBuffer(GLEnum.ArrayBuffer, _vertexBufferObject);
            Program.GL.BufferData(GLEnum.ArrayBuffer, (ReadOnlySpan<float>)model.vertices.AsSpan(), GLEnum.StaticDraw);
            // --- -------- --- //

            // --- INDICES --- //
            _elementBufferObject = Program.GL.GenBuffer();
            Program.GL.BindBuffer(GLEnum.ElementArrayBuffer, _elementBufferObject);
            Program.GL.BufferData(GLEnum.ElementArrayBuffer, (ReadOnlySpan<uint>)model.indices.AsSpan(), GLEnum.StaticDraw);
            // --- ------- --- //

            // --- SHADER --- //
            Shader program = ShaderManager.LoadProgram(shader);
            ShaderManager.ActivateShaderProgram(shader);
            // --- ------ --- //

            // --- TEXTURE --- //
            for(uint i = 0; i < textures.Count; i++) 
            {
                program.SetInt($"texture{i}", (int)i);
            }
            // --- ------- --- //

            // --- VERTICES --- //
            uint vertexLocation = (uint)Program.GL.GetAttribLocation(program.id, "aPosition");
            Program.GL.VertexAttribPointer(vertexLocation, 3, GLEnum.Float, false, 0, null);
            Program.GL.EnableVertexAttribArray(vertexLocation);
            // --- -------- --- //

            // --- TEXTURE --- //
            _colorBufferObject = Program.GL.GenBuffer();
            Program.GL.BindBuffer(GLEnum.ArrayBuffer, _colorBufferObject);
            Program.GL.BufferData(GLEnum.ArrayBuffer, (ReadOnlySpan<float>)model.texture.AsSpan(), GLEnum.StaticDraw);

            uint textureLocation = (uint)Program.GL.GetAttribLocation(program.id, "aTexCoord");
            Program.GL.VertexAttribPointer(textureLocation, 2, GLEnum.Float, false, 0, null);
            Program.GL.EnableVertexAttribArray(textureLocation);
            // --- ------- --- //

            //Console.WriteLine($"Width: {Program.GetWindowSize().X}, Height: {Program.GetWindowSize().Y}, Ratio: {Program.GetWindowSize().X / Program.GetWindowSize().Y}");
        }

        public unsafe void Draw()
        {
            for (int i = 0; i < textures.Count; i++)
            {
                textures[i].Use((TextureUnit)(TextureUnit.Texture0+i));
            }

            Shader program = ShaderManager.ActivateShaderProgram(shader); //

            var _rotation = (Matrix4X4.CreateRotationX<float>(((float)Math.PI / 180) * rotation.X) * Matrix4X4.CreateRotationY<float>(((float)Math.PI / 180) * rotation.Y) * Matrix4X4.CreateRotationZ<float>(((float)Math.PI / 180) * rotation.Z));
            var _model = Matrix4X4<float>.Identity * Matrix4X4.CreateScale<float>(scale) * Matrix4X4.CreateTranslation<float>(position) * _rotation;

            /*
            if(debug == true)
            {
                Console.Write($"{name}: ({position})\nCamera: ({Program.camera.Position})");
            }
            

            program.SetFloat("fade", Program.loop* Program.loop);

            program.SetMatrix4("model", _model);
            program.SetMatrix4("view", Program._view);
            program.SetMatrix4("projection", Program._projection);

            Program.GL.BindVertexArray(_vertexArrayObject);
            Program.GL.DrawElements(GLEnum.Triangles, (uint)model.indices.Length, GLEnum.UnsignedInt, null);
        }
    }
    */